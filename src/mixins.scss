@use "sass:math";
@import "config";

// Dash
// A simple, lite-weight and powerful CSS framework

// ------ Color palette ------

/// Color map
/// This global variable holds all colors.
$-colors-map: ();

@each $key, $value in $-colors {
  $-temp-map-1: ();
  $-temp-map-2: ();
  $-temp-map-3: ();
  $-temp-map-4: ();
  $-temp-map-5: ();
  $-temp-map-3: map-merge($-temp-map-3, (#{$key}-3: $value));
  $-temp-map-2: map-merge(
    $-temp-map-2,
    (#{$key}-2: lighten($value, $-brightness-factor-1))
  );
  $-temp-map-4: map-merge(
    $-temp-map-4,
    (#{$key}-4: darken($value, $-brightness-factor-1))
  );
  $-temp-map-1: map-merge(
    $-temp-map-1,
    (#{$key}-1: lighten($value, $-brightness-factor-2))
  );
  $-temp-map-5: map-merge(
    $-temp-map-5,
    (#{$key}-5: darken($value, $-brightness-factor-2))
  );
  $-colors-map: map-merge($-colors-map, $-temp-map-1);
  $-colors-map: map-merge($-colors-map, $-temp-map-2);
  $-colors-map: map-merge($-colors-map, $-temp-map-3);
  $-colors-map: map-merge($-colors-map, $-temp-map-4);
  $-colors-map: map-merge($-colors-map, $-temp-map-5);
}
$-colors-map: map-merge(
  $-colors-map,
  (
    "transparent": transparent,
  )
);

// ------ Mixins ------

/// States
///
/// Adds hover and focus states to the class
/// by appending `-hover` for hover effects and `-focus`
/// for focus interactions. For instance, `*-hover` will apply
/// styles when the mouse hovers over the element, while
/// `*-focus` applies styles when the element is focused.
/// (The `*` represents any class name.)
@mixin states {
  &,
  &-hover:hover,
  &-focus:focus {
    @content;
  }
}

/// Two-color gradient
///
/// @param {array} $items
///   An array of colors
/// @param {boolean} $states
///   Adds hover and focus states to the class if set to true
@mixin gradient-2-color($items: $-gradient-colors, $states: true) {
  @each $index1, $item1 in $items {
    $color1-2: lighten($item1, 10%);
    $color1-1: lighten($color1-2, 10%);
    $color1-3: $item1;
    $color1-4: darken($item1, 10%);
    $color1-5: darken($color1-4, 10%);
    @each $index2, $item2 in $items {
      @if ($index1 != $index2) {
        $color2-2: lighten($item2, 10%);
        $color2-1: lighten($color2-2, 10%);
        $color2-3: $item2;
        $color2-4: darken($item2, 10%);
        $color2-5: darken($color2-4, 10%);
        @if $states {
          &-#{$index1}-#{$index2} {
            @include states {
              background-image: linear-gradient(
                to right top,
                $color1-5,
                $color1-4,
                $color1-3,
                $color1-2,
                $color1-1,
                $color2-1,
                $color2-2,
                $color2-3,
                $color2-4,
                $color2-5
              );
            }
          }
        } @else {
          &-#{$index1}-#{$index2} {
            background-image: linear-gradient(
              to right top,
              $color1-5,
              $color1-4,
              $color1-3,
              $color1-2,
              $color1-1,
              $color2-1,
              $color2-2,
              $color2-3,
              $color2-4,
              $color2-5
            );
          }
        }
      }
    }
  }
}

/// Three-color gradient
///
/// @param {array} $items
///   An array of colors
/// @param {boolean} $states
///   Adds hover and focus states to the class if set to true
@mixin gradient-3-color($items: $-gradient-colors, $states: true) {
  @each $index1, $item1 in $items {
    $color1-2: lighten($item1, 10%);
    $color1-1: lighten($color1-2, 10%);
    $color1-3: $item1;
    $color1-4: darken($item1, 10%);
    $color1-5: darken($color1-4, 10%);
    @each $index2, $item2 in $items {
      @if ($index1 != $index2) {
        $color2-2: lighten($item2, 10%);
        $color2-1: lighten($color2-2, 10%);
        $color2-3: $item2;
        $color2-4: darken($item2, 10%);
        $color2-5: darken($color2-4, 10%);
        @each $index3, $item3 in $items {
          @if ($index1 != $index3 and $index2 != $index3) {
            $color3-2: lighten($item3, 10%);
            $color3-1: lighten($color3-2, 10%);
            $color3-3: $item3;
            $color3-4: darken($item3, 10%);
            $color3-5: darken($color3-4, 10%);
            @if $states {
              &-#{$index1}-#{$index2}-#{$index3} {
                @include states {
                  background-image: linear-gradient(
                    to right top,
                    $color1-5,
                    $color1-4,
                    $color1-3,
                    $color1-2,
                    $color1-1,
                    $color2-1,
                    $color2-2,
                    $color2-3,
                    $color2-4,
                    $color2-5,
                    $color3-5,
                    $color3-4,
                    $color3-3,
                    $color3-2,
                    $color3-1
                  );
                }
              }
            } @else {
              &-#{$index1}-#{$index2}-#{$index3} {
                background-image: linear-gradient(
                  to right top,
                  $color1-5,
                  $color1-4,
                  $color1-3,
                  $color1-2,
                  $color1-1,
                  $color2-1,
                  $color2-2,
                  $color2-3,
                  $color2-4,
                  $color2-5,
                  $color3-5,
                  $color3-4,
                  $color3-3,
                  $color3-2,
                  $color3-1
                );
              }
            }
          }
        }
      }
    }
  }
}

/// Items
///
/// @param {string} $property
///   A CSS property
/// @param {array} $items
///   Values for the specified property
/// @param {boolean} $states
///   Adds hover and focus states to the class if set to true
@mixin items($property, $items, $states: true) {
  @each $index, $item in $items {
    @if $item==null {
      $item: $index;
    }
    @if $states {
      &-#{$index} {
        @include states {
          #{$property}: $item;
          @content;
        }
      }
    } @else {
      &-#{$index} {
        #{$property}: $item;
        @content;
      }
    }
  }
}

/// Complex items
///
/// @param {string} $property
///   A CSS property
/// @param {array} $items
///   Values for the specified property
/// @param {boolean} $states
///   Adds hover and focus states to the class if set to true
@mixin complex_items($property, $items, $states: true) {
  @each $index, $item in $items {
    @if $item==null {
      $item: $index;
    }
    @if $states {
      &-#{$index} {
        @include states {
          #{$property}: unquote($item);
          @content;
        }
      }
    } @else {
      &-#{$index} {
        #{$property}: unquote($item);
        @content;
      }
    }
  }
}

/// Sizes
///
/// @param {string} $property
///   A CSS property
/// @param {array} $items
///   Sizes for the specified property
/// @param {boolean} $states
///   Adds hover and focus states to the class if set to true
@mixin sizes($property, $items: $-small-sizes, $states: true) {
  @each $index, $item in $items {
    @if $item==null {
      $item: $index;
    }
    @if $states {
      &-#{$index} {
        @include states {
          #{$property}: $item;
          @content;
        }
      }
    } @else {
      &-#{$index} {
        #{$property}: $item;
        @content;
      }
    }
  }
}

/// Sizes in rem
///
/// @param {string} $property
///   A CSS property
/// @param {array} $items
///   Sizes for the specified property
/// @param {boolean} $states
///   Adds hover and focus states to the class if set to true
@mixin sizes_in_rem($property, $items: $-small-sizes, $states: true) {
  @each $index, $item in $items {
    @if $item==null {
      $item: $index;
    }
    @if $states {
      &-#{$index} {
        @include states {
          #{$property}: #{$item}rem;
          @content;
        }
      }
    } @else {
      &-#{$index} {
        #{$property}: #{$item}rem;
        @content;
      }
    }
  }
}

/// Fonts
///
/// @param {array} $sizes
///   An array specifying sizes for fonts
/// @param {boolean} $line-heights
///   An array specifying sizes for line heights
@mixin fonts($sizes: $-font-sizes, $line-heights: $-font-heights) {
  @for $i from 1 to length($sizes) + 1 {
    &-#{$i} {
      @include states {
        font-size: #{nth($sizes, $i)};
        line-height: #{nth($line-heights, $i)};
      }
    }
  }
}

/// Orders
///
/// Utility classes including orders of CSS flexbox
@mixin orders {
  @each $index, $item in $-orders {
    @if $item==null {
      $item: $index;
    } @else {
      &-#{$index} {
        // -ms-flex-order: $item;
        // -webkit-box-ordinal-group: $item;
        // -moz-box-ordinal-group: $item;
        // -webkit-order: $item;
        order: $item;
        @content;
      }
    }
  }
}

/// Grid
///
/// Utility classes for flexbox grid
/// @param {array} $name
///   An array specifying sizes for fonts
/// @param {boolean} $columns
///   An array specifying sizes for line heights
@mixin grid($name, $columns) {
  .#{$name}span-0 {
    display: none;
  }
  .#{$name}span-auto {
    flex-grow: 1;
  }
  @for $i from 1 to $columns + 1 {
    .#{$name}span-#{$i} {
      width: #{math.div($i, $columns) * 100%};
    }
  }
}

/// Classes
///
/// Utility classes
@mixin classes($grid-prefix) {
  /* Center alignment */
  /* Example: -t-center -md-t-center */
  .#{$-prefix}#{$grid-prefix}t-center {
    text-align: center;
  }

  /* Left alignment */
  /* Example: -t-left -md-t-left */
  .#{$-prefix}#{$grid-prefix}t-left {
    text-align: left;
  }

  /* Right alignment */
  /* Example: -t-right -t-right-hover -lg-t-right-focus*/
  .#{$-prefix}#{$grid-prefix}t-right {
    text-align: right;
  }

  /* Justified text */
  /* Example: -t-justify -md-t-justify-hover -t-justify-focus */
  .#{$-prefix}#{$grid-prefix}t-justify {
    text-align: justify;
  }

  /* Center both horizontally and vertically */
  .#{$-prefix}#{$grid-prefix}center {
    text-align: center;
    margin: auto;
    vertical-align: middle;
  }

  /* Align vertically */
  /* Example: -md-vertical-middle -vertical-top -vertical-bottom */
  .#{$-prefix}#{$grid-prefix}vertical {
    @include items(vertical-align, (top, middle, bottom));
  }

  /* Width 100% */
  .#{$-prefix}#{$grid-prefix}w-full {
    width: 100%;
  }

  /* Height 100% */
  .#{$-prefix}#{$grid-prefix}h-full {
    height: 100%;
  }

  /* Width 100vw */
  .#{$-prefix}#{$grid-prefix}w-screen {
    width: 100vw;
  }

  /* Height 100vh */
  .#{$-prefix}#{$grid-prefix}h-screen {
    height: 100vh;
  }

  /* Full screen */
  .#{$-prefix}#{$grid-prefix}screen {
    width: 100vw;
    height: 100vh;
  }

  /* Width and height, 100% */
  .#{$-prefix}#{$grid-prefix}full {
    width: 100%;
    height: 100%;
  }

  /* No margin and padding */
  .#{$-prefix}#{$grid-prefix}pressed {
    margin: 0;
    padding: 0;
  }

  /* Z-index */
  /* Example: -z-1-front -md-z-2-back */
  .#{$-prefix}#{$grid-prefix}z {
    @include items(z-index, $-z-indices, false);
  }

  /* Scrollbar */
  /*** BEGIN ***/
  /* Hides the scroll-bars */
  .#{$-prefix}#{$grid-prefix}scroll-hidden {
    overflow: hidden;
  }

  /* Shows the browser scroll-bars when needed. */
  .#{$-prefix}#{$grid-prefix}scroll {
    overflow: auto;
  }

  /* Shows the horizontal scroll-bar when needed. */
  .#{$-prefix}#{$grid-prefix}scroll-x {
    overflow-x: auto;
  }

  /* Shows the vertical scroll-bar when needed. */
  .#{$-prefix}#{$grid-prefix}scroll-y {
    overflow-y: auto;
  }
  /*** END ***/

  /* Floats the element to the right side */
  .#{$-prefix}#{$grid-prefix}float-right {
    float: right;
  }

  /* Floats the element to the left side */
  .#{$-prefix}#{$grid-prefix}float-left {
    float: left;
  }

  /* Normal position */
  .#{$-prefix}#{$grid-prefix}float-none {
    float: none;
  }

  /*
  *  Font size
  *  Example:
  *  <div class='-font-5'>The font size of this text is 9.</div>
  *  <div class='-font-3-hover'>The font size of this text is 11 when the mouse hovers.</div>
  *
  */
  /* Values: zero, 1 to 10 */
  /* Example: -font-24 -md-font-16-hover -sm-font-13-focus */
  .#{$-prefix}#{$grid-prefix}font {
    @include fonts;
  }
  /*
  *  The `line-height` sizes
  *  Example:
  *  <div class='-line-3'>The line height of this text is 11.</div>
  *  <div class='-line-4-hover'>The line height of this text is 14 when the mouse hovers.</div>
  */
  /* Values: zero, 1 to 10 */
  /* Example: -line-2 -md-line-3-hover -line-6-focus */
  .#{$-prefix}#{$grid-prefix}line {
    @include sizes(line-height);
  }
  /* Initial line height */
  .#{$-prefix}#{$grid-prefix}line-inherit {
    @include states {
      line-height: inherit;
    }
  }
  /* Normal line height */
  .#{$-prefix}#{$grid-prefix}line-normal {
    @include states {
      line-height: normal;
    }
  }
  /* Hidden element */
  .#{$-prefix}#{$grid-prefix}d-hidden {
    @include states {
      display: none;
    }
  }
  /* Ghost element */
  .#{$-prefix}#{$grid-prefix}d-blank {
    @include states {
      visibility: hidden;
    }
  }
  /* Hidden element. */
  /* For Example, hides a row of a table without resizing its columns. */
  .#{$-prefix}#{$grid-prefix}d-collapse {
    @include states {
      visibility: collapse;
    }
  }
  /* Container behavior */
  .#{$-prefix}#{$grid-prefix}d-block {
    @include states {
      display: block;
    }
  }
  /* Box effects */
  /*** BEGIN ***/
  /* Values: transparent, 5pc, 10pc, 15pc, 25pc, 35pc, 50pc, 65pc, 75pc, 85pc, 90pc, 95pc, full */
  /* Example: -opacity-5 -opacity-15-hover -opacity-35-focus */
  .#{$-prefix}#{$grid-prefix}opacity {
    @include items(opacity, $-opacity-levels);
  }
  /* Values: 1, 2, 3, 4, 5, 6 */
  /* Example: -shadow-1 -md-shadow-2-hover */
  .#{$-prefix}#{$grid-prefix}shadow {
    @include items(box-shadow, $-shadows);
  }
  // `rt`: right-bottom
  /* Values: 1, 2, 3, 4, 5, 6 */
  /* Example: -md-shadow-rt-5 -shadow-rt-4-hover */
  .#{$-prefix}#{$grid-prefix}shadow-rt {
    @include items(box-shadow, $-shadows-rt);
  }
  // `lt`: left-bottom
  /* Values: 1, 2, 3, 4, 5, 6 */
  /* Example: -shadow-lt-6 -md-shadow-lt-2-hover */
  .#{$-prefix}#{$grid-prefix}shadow-lt {
    @include items(box-shadow, $-shadows-lt);
  }
  // `rb`: right-bottom
  /* Values: 1, 2, 3, 4, 5, 6 */
  /* Example: -md-shadow-rb-3 -shadow-rb-1-hover */
  .#{$-prefix}#{$grid-prefix}shadow-rb {
    @include items(box-shadow, $-shadows-rb);
  }
  // `lb`: left-bottom
  /* Values: 1, 2, 3, 4, 5, 6 */
  /* Example: -shadow-lb-2 -md-shadow-lb-4-hover */
  .#{$-prefix}#{$grid-prefix}shadow-lb {
    @include items(box-shadow, $-shadows-lb);
  }
  /* Values: 1, 2, 3, 4, 5, 6 */
  /* Example: -text-shadow-1 -md-text-shadow-2-hover */
  .#{$-prefix}#{$grid-prefix}text-shadow {
    @include items(text-shadow, $-text-shadows);
  }
  /*** END ***/
  /* Border radius. example: -rounded-1 (border size: 3px), -rounded-2-hover (border size 5px on mouse hover)*/
  /* Values: 3, 5, 7, 10, 15, 20, 25, 35 */
  /* Example: -rounded-5 -rounded-3-hover -md-rounded-10-focus */
  .#{$-prefix}#{$grid-prefix}b-rounded {
    @include sizes(border-radius, $-small-sizes);
  }
  /* Border */
  /*** BEGIN ***/
  .#{$-prefix}#{$grid-prefix}b {
    @include states {
      border: solid 1px #ddd;
    }
  }
  .#{$-prefix}#{$grid-prefix}b-none {
    @include states {
      border: none;
    }
  }
  .#{$-prefix}#{$grid-prefix}bt {
    @include states {
      border-top: solid 1px #ddd;
    }
  }
  .#{$-prefix}#{$grid-prefix}bb {
    @include states {
      border-left: solid 1px #ddd;
    }
  }
  .#{$-prefix}#{$grid-prefix}br {
    @include states {
      border-right: solid 1px #ddd;
    }
  }
  .#{$-prefix}#{$grid-prefix}bl {
    @include states {
      border-left: solid 1px #ddd;
    }
  }
  .#{$-prefix}#{$grid-prefix}bx {
    @include states {
      border-left: solid 1px #ddd;
      border-right: solid 1px #ddd;
    }
  }
  .#{$-prefix}#{$grid-prefix}by {
    @include states {
      border-top: solid 1px #ddd;
      border-bottom: solid 1px #ddd;
    }
  }
  .#{$-prefix}#{$grid-prefix}b-1 {
    @include states {
      border-width: 0.0625rem;
    }
  }
  .#{$-prefix}#{$grid-prefix}b-2 {
    @include states {
      border-width: 0.125rem;
    }
  }
  .#{$-prefix}#{$grid-prefix}b-3 {
    @include states {
      border-width: 0.25rem;
    }
  }
  .#{$-prefix}#{$grid-prefix}b-4 {
    @include states {
      border-width: 0.25rem;
    }
  }
  .#{$-prefix}#{$grid-prefix}b-5 {
    @include states {
      border-width: 0.3125rem;
    }
  }
  .#{$-prefix}#{$grid-prefix}b-6 {
    @include states {
      border-width: 0.375rem;
    }
  }
  .#{$-prefix}#{$grid-prefix}b-dotted {
    @include states {
      border-style: dotted;
    }
  }
  .#{$-prefix}#{$grid-prefix}b-dashed {
    @include states {
      border-style: dashed;
    }
  }
  .#{$-prefix}#{$grid-prefix}b-solid {
    @include states {
      border-style: solid;
    }
  }
  .#{$-prefix}#{$grid-prefix}b-double {
    @include states {
      border-style: double;
    }
  }
  .#{$-prefix}#{$grid-prefix}b-ridge {
    @include states {
      border-style: ridge;
    }
  }
  .#{$-prefix}#{$grid-prefix}b-groove {
    @include states {
      border-style: groove;
    }
  }
  /*** END ***/

  /* Outline */
  /*** BEGIN ***/
  .#{$-prefix}#{$grid-prefix}outline {
    @include states {
      outline: solid 1px $-white;
    }
  }
  .#{$-prefix}#{$grid-prefix}outline-none {
    @include states {
      outline: none;
    }
  }
  .#{$-prefix}#{$grid-prefix}outline-1 {
    @include states {
      outline-width: 1px;
    }
  }
  .#{$-prefix}#{$grid-prefix}outline-2 {
    @include states {
      outline-width: 2px;
    }
  }
  .#{$-prefix}#{$grid-prefix}outline-3 {
    @include states {
      outline-width: 3px;
    }
  }
  .#{$-prefix}#{$grid-prefix}outline-4 {
    @include states {
      outline-width: 4px;
    }
  }
  .#{$-prefix}#{$grid-prefix}outline-5 {
    @include states {
      outline-width: 5px;
    }
  }
  .#{$-prefix}#{$grid-prefix}outline-6 {
    @include states {
      outline-width: 6px;
    }
  }
  .#{$-prefix}#{$grid-prefix}outline-offset-1 {
    @include states {
      outline-offset: 1px;
    }
  }
  .#{$-prefix}#{$grid-prefix}outline-offset-2 {
    @include states {
      outline-offset: 2px;
    }
  }
  .#{$-prefix}#{$grid-prefix}outline-offset-3 {
    @include states {
      outline-offset: 3px;
    }
  }
  .#{$-prefix}#{$grid-prefix}outline-dotted {
    @include states {
      outline-style: dotted;
    }
  }
  .#{$-prefix}#{$grid-prefix}outline-dashed {
    @include states {
      outline-style: dashed;
    }
  }
  .#{$-prefix}#{$grid-prefix}outline-solid {
    @include states {
      outline-style: solid;
    }
  }
  .#{$-prefix}#{$grid-prefix}outline-double {
    @include states {
      outline-style: double;
    }
  }
  .#{$-prefix}#{$grid-prefix}outline-ridge {
    @include states {
      outline-style: ridge;
    }
  }
  .#{$-prefix}#{$grid-prefix}outline-groove {
    @include states {
      outline-style: groove;
    }
  }
  /*** END ***/

  /*
  *   Height sizes
  *   Example: -md-h-50px-hover (height: 50px), -h-100px-hover (height: 100px on mouse hover)
  *   Values: zero, 1 to 10, 1, 2px, 3px, 5px, 7px, 10px, 15px, 20px, 25px, 30px, 35px,
  *   40px, 45px, 50px, 60px, 70px, 80px, 90px, 100px, 120px, 140px, 160px, 180px, 200px,
  *   250px, 300px, 350px, 400px, 450px, 500px, sm, md, lg, xl, xxl
  *   Example: -h-5 -h-20px-hover -md-h-160px-focus
  */
  .#{$-prefix}#{$grid-prefix}h {
    @include sizes(height, $-sizes);
  }
  /*
  *   Width sizes
  *   Example: -md-w-50px-hover (width: 50px), -w-100px-hover (width: 100px on mouse hover)
  *   Values: zero, 1 to 10, 1, 2px, 3px, 5px, 7px, 10px, 15px, 20px, 25px, 30px, 35px,
  *   40px, 45px, 50px, 60px, 70px, 80px, 90px, 100px, 120px, 140px, 160px, 180px, 200px,
  *   250px, 300px, 350px, 400px, 450px, 500px, sm, md, lg, xl, xxl
  *   Example: -w-5 -w-20px-hover -md-w-160px-focus
  */
  .#{$-prefix}#{$grid-prefix}w {
    @include sizes(width, $-sizes);
  }
  /*
  *   The `max-width` property sizes
  *   Example: -md-mw-50px-hover (width: 50px), -mw-100px-hover (width: 100px on mouse hover)
  *   Values: zero, 1 to 10, 1, 2px, 3px, 5px, 7px, 10px, 15px, 20px, 25px, 30px, 35px,
  *   40px, 45px, 50px, 60px, 70px, 80px, 90px, 100px, 120px, 140px, 160px, 180px, 200px,
  *   250px, 300px, 350px, 400px, 450px, 500px, sm, md, lg, xl, xxl
  *   Example: -mw-5 -mw-20px-hover -md-mw-160px-focus
  */
  .#{$-prefix}#{$grid-prefix}mw {
    @include sizes(width, $-sizes, false);
  }
  /* Margin and padding sizes */
  /*** BEGIN ***/

  /* Top margin */
  /* Values: auto, zero, 1 to 10 */
  /* Example: -mt-3 -lx-mt-5-hover -mt-10-focus */
  .#{$-prefix}#{$grid-prefix}mt,
  .#{$-prefix}#{$grid-prefix}my {
    @include sizes(margin-top, $-small-sizes2, false);
  }
  /* Right margin */
  /* Values: auto, zero, 1 to 10 */
  /* Example: -mr-3 -lx-mr-5-hover -mr-10-focus */
  .#{$-prefix}#{$grid-prefix}mr,
  .#{$-prefix}#{$grid-prefix}mx {
    @include sizes(margin-right, $-small-sizes2, false);
  }
  /* Bottom margin */
  /* Values: auto, zero, 1 to 10 */
  /* Example: -mb-3 -lx-mb-5-hover -mb-10-focus */
  .#{$-prefix}#{$grid-prefix}mb,
  .#{$-prefix}#{$grid-prefix}my {
    @include sizes(margin-bottom, $-small-sizes2, false);
  }
  /* Left margin */
  /* Values: auto, zero, 1 to 10 */
  /* Example: -ml-3 -lx-ml-5-hover -ml-10-focus */
  .#{$-prefix}#{$grid-prefix}ml,
  .#{$-prefix}#{$grid-prefix}mx {
    @include sizes(margin-left, $-small-sizes2, false);
  }
  /* Left and right margins */
  /* Values: auto, zero, 1 to 10 */
  /* Example: -mx-3 -lx-mx-5-hover -mx-10-focus */
  /*
  * .#{$-prefix}#{$grid-prefix}mx {
  *   @include sizes(margin-left, $-small-sizes2);
  *   @include sizes(margin-right, $-small-sizes2);
  * }
  */
  /* Top and bottom margins */
  /* Values: auto, zero, 1 to 10 */
  /* Example: -my-3 -lx-my-5-hover -my-10-focus */
  /*
  * .#{$-prefix}#{$grid-prefix}my {
  *   @include sizes(margin-top, $-small-sizes2);
  *   @include sizes(margin-bottom, $-small-sizes2);
  * }
  */
  /* Box margins, all sides */
  /* Values: auto, zero, 1 to 10 */
  /* Example: -m-3 */
  .#{$-prefix}#{$grid-prefix}m {
    @include sizes(margin, $-small-sizes2, false);
  }

  /* Top padding */
  /* Values: zero, 1 to 10 */
  /* Example: -pt-3 */
  .#{$-prefix}#{$grid-prefix}pt,
  .#{$-prefix}#{$grid-prefix}py {
    @include sizes(padding-top, $-small-sizes, false);
  }
  /* Right padding */
  /* Values: zero, 1 to 10 */
  /* Example: -pr-3 */
  .#{$-prefix}#{$grid-prefix}pr,
  .#{$-prefix}#{$grid-prefix}px {
    @include sizes(padding-right, $-small-sizes, false);
  }
  /* Bottom padding */
  /* Values: zero, 1 to 10 */
  /* Example: -pb-3 */
  .#{$-prefix}#{$grid-prefix}pb,
  .#{$-prefix}#{$grid-prefix}py {
    @include sizes(padding-bottom, $-small-sizes, false);
  }
  /* Left padding */
  /* Values: zero, 1 to 10 */
  /* Example: -pl-3 */
  .#{$-prefix}#{$grid-prefix}pl,
  .#{$-prefix}#{$grid-prefix}px {
    @include sizes(padding-left, $-small-sizes, false);
  }
  /* Left and right paddings */
  /* Values: zero, 1 to 10 */
  /* Example: -px-3 */
  /*
  * .#{$-prefix}#{$grid-prefix}px {
  *   @include sizes(padding-left, $-small-sizes2);
  *   @include sizes(padding-right, $-small-sizes2);
  * }
  */
  /* Top and bottom paddings */
  /* Values: zero, 1 to 10 */
  /* Example: -py-3 */
  /*
  * .#{$-prefix}#{$grid-prefix}py {
  *   @include sizes(padding-top, $-small-sizes2);
  *   @include sizes(padding-bottom, $-small-sizes2);
  * }
  */
  /* Box paddings, all sides */
  /* Values: zero, 1 to 10 */
  /* Example: -p-3 */
  .#{$-prefix}#{$grid-prefix}p {
    @include sizes(padding, $-small-sizes, false);
  }
  /*** END ***/

  /* Flex grid based on flexbox (for modern browsers) */
  /*** BEGIN ***/
  .#{$-prefix}#{$grid-prefix}f-wrap {
    flex-wrap: wrap;
  }
  .#{$-prefix}#{$grid-prefix}f-wrap-reverse {
    flex-wrap: wrap-reverse;
  }
  .#{$-prefix}#{$grid-prefix}f-row-gap {
    @include items(row-gap, $-small-sizes, false);
  }
  .#{$-prefix}#{$grid-prefix}f-col-gap {
    @include items(column-gap, $-small-sizes, false);
  }
  .#{$-prefix}#{$grid-prefix}f-item-start {
    align-self: flex-start;
  }
  .#{$-prefix}#{$grid-prefix}f-item-end {
    align-self: flex-end;
  }
  .#{$-prefix}#{$grid-prefix}f-item-center {
    align-self: center;
  }
  .#{$-prefix}#{$grid-prefix}f-item-stretch {
    align-self: stretch;
  }
  .#{$-prefix}#{$grid-prefix}f-item-baseline {
    align-self: baseline;
  }

  /*** END ***/
}
